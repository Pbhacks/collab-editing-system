{"ast":null,"code":"// src/websocket.js\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nlet stompClient = null;\nlet currentConnection = null;\nexport function connectWebSocket(docId, onMessage, onConnect) {\n  return new Promise(resolve => {\n    try {\n      // Clean up existing connection first\n      if (currentConnection) {\n        currentConnection.disconnect();\n        currentConnection = null;\n      }\n      if (stompClient && stompClient.connected) {\n        stompClient.deactivate();\n      }\n      console.log(`Attempting to connect to WebSocket for document ${docId}`);\n      stompClient = new Client({\n        webSocketFactory: () => {\n          // Add error handling for SockJS connection\n          const sockjs = new SockJS(\"http://localhost:8080/ws\");\n          sockjs.onopen = () => {\n            console.log(\"SockJS connection opened\");\n          };\n          sockjs.onerror = error => {\n            console.error(\"SockJS connection error:\", error);\n          };\n          sockjs.onclose = event => {\n            console.log(\"SockJS connection closed:\", event.code, event.reason);\n          };\n          return sockjs;\n        },\n        debug: str => {\n          // Enable debug logs in development\n          if (process.env.NODE_ENV === 'development') {\n            console.log('STOMP Debug:', str);\n          }\n        },\n        reconnectDelay: 5000,\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000,\n        // Connection timeout\n        connectionTimeout: 10000,\n        onConnect: frame => {\n          console.log(\"STOMP connected successfully:\", frame);\n          try {\n            // Subscribe to document updates\n            const subscription = stompClient.subscribe(`/topic/document/${docId}`, message => {\n              console.log(\"Received WebSocket message:\", message);\n              if (message.body) {\n                try {\n                  const parsedMessage = JSON.parse(message.body);\n                  console.log(\"Parsed message:\", parsedMessage);\n                  onMessage(parsedMessage);\n                } catch (parseError) {\n                  console.error(\"Failed to parse WebSocket message:\", parseError);\n                  console.error(\"Raw message body:\", message.body);\n                }\n              }\n            });\n\n            // Store connection info for cleanup\n            currentConnection = {\n              subscription,\n              disconnect: () => {\n                console.log(\"Disconnecting WebSocket...\");\n                try {\n                  if (subscription) {\n                    subscription.unsubscribe();\n                    console.log(\"Subscription unsubscribed\");\n                  }\n                } catch (e) {\n                  console.error(\"Error unsubscribing:\", e);\n                }\n                try {\n                  if (stompClient && stompClient.connected) {\n                    stompClient.deactivate();\n                    console.log(\"STOMP client deactivated\");\n                  }\n                } catch (e) {\n                  console.error(\"Error deactivating STOMP client:\", e);\n                }\n                stompClient = null;\n                currentConnection = null;\n              }\n            };\n\n            // Call onConnect callback if provided\n            if (onConnect) {\n              try {\n                onConnect();\n              } catch (e) {\n                console.error(\"Error in onConnect callback:\", e);\n              }\n            }\n            resolve({\n              connected: true,\n              disconnect: currentConnection.disconnect\n            });\n          } catch (subscriptionError) {\n            console.error(\"Error setting up subscription:\", subscriptionError);\n            resolve({\n              connected: false,\n              disconnect: () => {},\n              error: subscriptionError.message\n            });\n          }\n        },\n        onStompError: frame => {\n          console.error(\"STOMP error frame:\", frame);\n          console.error(\"STOMP error details:\", {\n            command: frame.command,\n            headers: frame.headers,\n            body: frame.body\n          });\n          resolve({\n            connected: false,\n            disconnect: () => {},\n            error: frame.body || \"STOMP connection error\"\n          });\n        },\n        onWebSocketError: error => {\n          console.error(\"WebSocket error:\", error);\n          resolve({\n            connected: false,\n            disconnect: () => {},\n            error: \"WebSocket connection failed\"\n          });\n        },\n        onWebSocketClose: event => {\n          console.log(\"WebSocket closed:\", event.code, event.reason);\n          if (event.code !== 1000) {\n            // 1000 = normal closure\n            console.warn(\"WebSocket closed unexpectedly\");\n          }\n        },\n        onDisconnect: frame => {\n          console.log(\"STOMP disconnected:\", frame);\n        }\n      });\n\n      // Set a timeout for connection attempt\n      const connectionTimeout = setTimeout(() => {\n        if (!stompClient || !stompClient.connected) {\n          console.error(\"WebSocket connection timeout\");\n          if (stompClient) {\n            try {\n              stompClient.deactivate();\n            } catch (e) {\n              console.error(\"Error deactivating on timeout:\", e);\n            }\n          }\n          resolve({\n            connected: false,\n            disconnect: () => {},\n            error: \"Connection timeout\"\n          });\n        }\n      }, 10000);\n\n      // Clear timeout when connection is established\n      stompClient.onConnect = frame => {\n        clearTimeout(connectionTimeout);\n        stompClient.onConnect(frame); // Call the original handler\n      };\n\n      // Start the connection\n      console.log(\"Activating STOMP client...\");\n      stompClient.activate();\n    } catch (initError) {\n      console.error(\"WebSocket initialization error:\", initError);\n      resolve({\n        connected: false,\n        disconnect: () => {},\n        error: initError.message\n      });\n    }\n  });\n}\nexport function sendEditViaWS(docId, payload) {\n  // Validate inputs\n  if (!docId) {\n    console.error(\"sendEditViaWS: docId is required\");\n    return false;\n  }\n  if (!payload) {\n    console.error(\"sendEditViaWS: payload is required\");\n    return false;\n  }\n\n  // Check if client is connected\n  if (!stompClient) {\n    console.warn(\"sendEditViaWS: STOMP client not initialized\");\n    return false;\n  }\n  if (!stompClient.connected) {\n    console.warn(\"sendEditViaWS: STOMP client not connected\");\n    return false;\n  }\n  try {\n    const destination = `/app/edit/${docId}`;\n    const messageBody = JSON.stringify(payload);\n    console.log(\"Sending WebSocket message:\", {\n      destination,\n      payload\n    });\n    stompClient.publish({\n      destination,\n      body: messageBody,\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    console.log(\"WebSocket message sent successfully\");\n    return true;\n  } catch (sendError) {\n    console.error(\"Error sending WebSocket message:\", sendError);\n    return false;\n  }\n}\n\n// Utility function to get connection status\nexport function getConnectionStatus() {\n  return {\n    hasClient: !!stompClient,\n    isConnected: stompClient ? stompClient.connected : false,\n    state: stompClient ? stompClient.state : 'DISCONNECTED'\n  };\n}\n\n// Utility function to disconnect\nexport function disconnectWebSocket() {\n  if (currentConnection) {\n    currentConnection.disconnect();\n  }\n}\n\n// Handle page unload\nif (typeof window !== 'undefined') {\n  window.addEventListener('beforeunload', () => {\n    disconnectWebSocket();\n  });\n}","map":{"version":3,"names":["Client","SockJS","stompClient","currentConnection","connectWebSocket","docId","onMessage","onConnect","Promise","resolve","disconnect","connected","deactivate","console","log","webSocketFactory","sockjs","onopen","onerror","error","onclose","event","code","reason","debug","str","process","env","NODE_ENV","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","connectionTimeout","frame","subscription","subscribe","message","body","parsedMessage","JSON","parse","parseError","unsubscribe","e","subscriptionError","onStompError","command","headers","onWebSocketError","onWebSocketClose","warn","onDisconnect","setTimeout","clearTimeout","activate","initError","sendEditViaWS","payload","destination","messageBody","stringify","publish","sendError","getConnectionStatus","hasClient","isConnected","state","disconnectWebSocket","window","addEventListener"],"sources":["C:/Users/Admin/Documents/collab-editing-system/frontend/src/websocket.js"],"sourcesContent":["// src/websocket.js\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\n\r\nlet stompClient = null;\r\nlet currentConnection = null;\r\n\r\nexport function connectWebSocket(docId, onMessage, onConnect) {\r\n  return new Promise((resolve) => {\r\n    try {\r\n      // Clean up existing connection first\r\n      if (currentConnection) {\r\n        currentConnection.disconnect();\r\n        currentConnection = null;\r\n      }\r\n\r\n      if (stompClient && stompClient.connected) {\r\n        stompClient.deactivate();\r\n      }\r\n\r\n      console.log(`Attempting to connect to WebSocket for document ${docId}`);\r\n\r\n      stompClient = new Client({\r\n        webSocketFactory: () => {\r\n          // Add error handling for SockJS connection\r\n          const sockjs = new SockJS(\"http://localhost:8080/ws\");\r\n          \r\n          sockjs.onopen = () => {\r\n            console.log(\"SockJS connection opened\");\r\n          };\r\n          \r\n          sockjs.onerror = (error) => {\r\n            console.error(\"SockJS connection error:\", error);\r\n          };\r\n          \r\n          sockjs.onclose = (event) => {\r\n            console.log(\"SockJS connection closed:\", event.code, event.reason);\r\n          };\r\n          \r\n          return sockjs;\r\n        },\r\n        \r\n        debug: (str) => {\r\n          // Enable debug logs in development\r\n          if (process.env.NODE_ENV === 'development') {\r\n            console.log('STOMP Debug:', str);\r\n          }\r\n        },\r\n        \r\n        reconnectDelay: 5000,\r\n        heartbeatIncoming: 4000,\r\n        heartbeatOutgoing: 4000,\r\n        \r\n        // Connection timeout\r\n        connectionTimeout: 10000,\r\n        \r\n        onConnect: (frame) => {\r\n          console.log(\"STOMP connected successfully:\", frame);\r\n          \r\n          try {\r\n            // Subscribe to document updates\r\n            const subscription = stompClient.subscribe(`/topic/document/${docId}`, (message) => {\r\n              console.log(\"Received WebSocket message:\", message);\r\n              \r\n              if (message.body) {\r\n                try {\r\n                  const parsedMessage = JSON.parse(message.body);\r\n                  console.log(\"Parsed message:\", parsedMessage);\r\n                  onMessage(parsedMessage);\r\n                } catch (parseError) {\r\n                  console.error(\"Failed to parse WebSocket message:\", parseError);\r\n                  console.error(\"Raw message body:\", message.body);\r\n                }\r\n              }\r\n            });\r\n\r\n            // Store connection info for cleanup\r\n            currentConnection = {\r\n              subscription,\r\n              disconnect: () => {\r\n                console.log(\"Disconnecting WebSocket...\");\r\n                try {\r\n                  if (subscription) {\r\n                    subscription.unsubscribe();\r\n                    console.log(\"Subscription unsubscribed\");\r\n                  }\r\n                } catch (e) {\r\n                  console.error(\"Error unsubscribing:\", e);\r\n                }\r\n                \r\n                try {\r\n                  if (stompClient && stompClient.connected) {\r\n                    stompClient.deactivate();\r\n                    console.log(\"STOMP client deactivated\");\r\n                  }\r\n                } catch (e) {\r\n                  console.error(\"Error deactivating STOMP client:\", e);\r\n                }\r\n                \r\n                stompClient = null;\r\n                currentConnection = null;\r\n              }\r\n            };\r\n\r\n            // Call onConnect callback if provided\r\n            if (onConnect) {\r\n              try {\r\n                onConnect();\r\n              } catch (e) {\r\n                console.error(\"Error in onConnect callback:\", e);\r\n              }\r\n            }\r\n\r\n            resolve({\r\n              connected: true,\r\n              disconnect: currentConnection.disconnect\r\n            });\r\n            \r\n          } catch (subscriptionError) {\r\n            console.error(\"Error setting up subscription:\", subscriptionError);\r\n            resolve({ \r\n              connected: false, \r\n              disconnect: () => {},\r\n              error: subscriptionError.message \r\n            });\r\n          }\r\n        },\r\n        \r\n        onStompError: (frame) => {\r\n          console.error(\"STOMP error frame:\", frame);\r\n          console.error(\"STOMP error details:\", {\r\n            command: frame.command,\r\n            headers: frame.headers,\r\n            body: frame.body\r\n          });\r\n          \r\n          resolve({ \r\n            connected: false, \r\n            disconnect: () => {},\r\n            error: frame.body || \"STOMP connection error\"\r\n          });\r\n        },\r\n        \r\n        onWebSocketError: (error) => {\r\n          console.error(\"WebSocket error:\", error);\r\n          resolve({ \r\n            connected: false, \r\n            disconnect: () => {},\r\n            error: \"WebSocket connection failed\"\r\n          });\r\n        },\r\n        \r\n        onWebSocketClose: (event) => {\r\n          console.log(\"WebSocket closed:\", event.code, event.reason);\r\n          if (event.code !== 1000) { // 1000 = normal closure\r\n            console.warn(\"WebSocket closed unexpectedly\");\r\n          }\r\n        },\r\n        \r\n        onDisconnect: (frame) => {\r\n          console.log(\"STOMP disconnected:\", frame);\r\n        }\r\n      });\r\n\r\n      // Set a timeout for connection attempt\r\n      const connectionTimeout = setTimeout(() => {\r\n        if (!stompClient || !stompClient.connected) {\r\n          console.error(\"WebSocket connection timeout\");\r\n          if (stompClient) {\r\n            try {\r\n              stompClient.deactivate();\r\n            } catch (e) {\r\n              console.error(\"Error deactivating on timeout:\", e);\r\n            }\r\n          }\r\n          resolve({ \r\n            connected: false, \r\n            disconnect: () => {},\r\n            error: \"Connection timeout\"\r\n          });\r\n        }\r\n      }, 10000);\r\n\r\n      // Clear timeout when connection is established\r\n      stompClient.onConnect = (frame) => {\r\n        clearTimeout(connectionTimeout);\r\n        stompClient.onConnect(frame); // Call the original handler\r\n      };\r\n\r\n      // Start the connection\r\n      console.log(\"Activating STOMP client...\");\r\n      stompClient.activate();\r\n      \r\n    } catch (initError) {\r\n      console.error(\"WebSocket initialization error:\", initError);\r\n      resolve({ \r\n        connected: false, \r\n        disconnect: () => {},\r\n        error: initError.message \r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport function sendEditViaWS(docId, payload) {\r\n  // Validate inputs\r\n  if (!docId) {\r\n    console.error(\"sendEditViaWS: docId is required\");\r\n    return false;\r\n  }\r\n  \r\n  if (!payload) {\r\n    console.error(\"sendEditViaWS: payload is required\");\r\n    return false;\r\n  }\r\n\r\n  // Check if client is connected\r\n  if (!stompClient) {\r\n    console.warn(\"sendEditViaWS: STOMP client not initialized\");\r\n    return false;\r\n  }\r\n  \r\n  if (!stompClient.connected) {\r\n    console.warn(\"sendEditViaWS: STOMP client not connected\");\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const destination = `/app/edit/${docId}`;\r\n    const messageBody = JSON.stringify(payload);\r\n    \r\n    console.log(\"Sending WebSocket message:\", {\r\n      destination,\r\n      payload\r\n    });\r\n\r\n    stompClient.publish({\r\n      destination,\r\n      body: messageBody,\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    console.log(\"WebSocket message sent successfully\");\r\n    return true;\r\n    \r\n  } catch (sendError) {\r\n    console.error(\"Error sending WebSocket message:\", sendError);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Utility function to get connection status\r\nexport function getConnectionStatus() {\r\n  return {\r\n    hasClient: !!stompClient,\r\n    isConnected: stompClient ? stompClient.connected : false,\r\n    state: stompClient ? stompClient.state : 'DISCONNECTED'\r\n  };\r\n}\r\n\r\n// Utility function to disconnect\r\nexport function disconnectWebSocket() {\r\n  if (currentConnection) {\r\n    currentConnection.disconnect();\r\n  }\r\n}\r\n\r\n// Handle page unload\r\nif (typeof window !== 'undefined') {\r\n  window.addEventListener('beforeunload', () => {\r\n    disconnectWebSocket();\r\n  });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}