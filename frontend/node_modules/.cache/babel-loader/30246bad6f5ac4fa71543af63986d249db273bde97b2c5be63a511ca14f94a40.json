{"ast":null,"code":"// websocket.js\n// Attempts to use STOMP over SockJS for realtime edits.\n// If connect fails, consumers should fall back to polling.\n\nimport { CompatClient, over } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\n\n/**\r\n * Try to connect to /ws endpoint at doc-service.\r\n * onMessage is called with parsed message object from server.\r\n * Returns a promise that resolves to an object {connected, disconnect}\r\n */\nexport function connectWebSocket(docId, onMessage, onConnect) {\n  return new Promise(resolve => {\n    try {\n      const socket = new SockJS(\"http://localhost:8082/ws\");\n      stompClient = over(socket); // using modern 'over' from @stomp/stompjs\n      stompClient.debug = () => {}; // disable debug logs\n\n      stompClient.connect({}, () => {\n        // subscribe to a topic for this document\n        const sub = stompClient.subscribe(`/topic/document/${docId}`, msg => {\n          if (msg.body) {\n            try {\n              onMessage(JSON.parse(msg.body));\n            } catch (e) {\n              console.error('Error parsing WebSocket message', e);\n            }\n          }\n        });\n        if (onConnect) onConnect();\n        resolve({\n          connected: true,\n          disconnect: () => {\n            try {\n              sub.unsubscribe();\n            } catch (e) {}\n            try {\n              stompClient.disconnect();\n            } catch (e) {}\n          }\n        });\n      }, err => {\n        console.error('WebSocket connection error', err);\n        resolve({\n          connected: false,\n          disconnect: () => {}\n        });\n      });\n    } catch (e) {\n      console.error('WebSocket setup error', e);\n      resolve({\n        connected: false,\n        disconnect: () => {}\n      });\n    }\n  });\n}\n\n/**\r\n * Send edit via STOMP to server path e.g. /app/edit/{docId}\r\n * Server must map this endpoint. If not available, client should call REST PUT.\r\n */\nexport function sendEditViaWS(docId, payload) {\n  if (!stompClient) return false;\n  try {\n    stompClient.send(`/app/edit/${docId}`, {}, JSON.stringify(payload));\n    return true;\n  } catch (e) {\n    console.error('Error sending WebSocket message', e);\n    return false;\n  }\n}","map":{"version":3,"names":["CompatClient","over","SockJS","stompClient","connectWebSocket","docId","onMessage","onConnect","Promise","resolve","socket","debug","connect","sub","subscribe","msg","body","JSON","parse","e","console","error","connected","disconnect","unsubscribe","err","sendEditViaWS","payload","send","stringify"],"sources":["C:/Users/Admin/Desktop/collab-editing-system/frontend/src/websocket.js"],"sourcesContent":["// websocket.js\r\n// Attempts to use STOMP over SockJS for realtime edits.\r\n// If connect fails, consumers should fall back to polling.\r\n\r\nimport { CompatClient, over } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nlet stompClient = null;\r\n\r\n/**\r\n * Try to connect to /ws endpoint at doc-service.\r\n * onMessage is called with parsed message object from server.\r\n * Returns a promise that resolves to an object {connected, disconnect}\r\n */\r\nexport function connectWebSocket(docId, onMessage, onConnect) {\r\n  return new Promise((resolve) => {\r\n    try {\r\n      const socket = new SockJS(\"http://localhost:8082/ws\");\r\n      stompClient = over(socket); // using modern 'over' from @stomp/stompjs\r\n      stompClient.debug = () => {}; // disable debug logs\r\n\r\n      stompClient.connect({}, () => {\r\n        // subscribe to a topic for this document\r\n        const sub = stompClient.subscribe(`/topic/document/${docId}`, (msg) => {\r\n          if (msg.body) {\r\n            try { \r\n              onMessage(JSON.parse(msg.body)); \r\n            } catch(e) { \r\n              console.error('Error parsing WebSocket message', e);\r\n            }\r\n          }\r\n        });\r\n\r\n        if (onConnect) onConnect();\r\n\r\n        resolve({\r\n          connected: true,\r\n          disconnect: () => {\r\n            try { sub.unsubscribe(); } catch(e) {}\r\n            try { stompClient.disconnect(); } catch(e) {}\r\n          }\r\n        });\r\n      }, (err) => {\r\n        console.error('WebSocket connection error', err);\r\n        resolve({ connected: false, disconnect: () => {} });\r\n      });\r\n    } catch (e) {\r\n      console.error('WebSocket setup error', e);\r\n      resolve({ connected: false, disconnect: () => {} });\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Send edit via STOMP to server path e.g. /app/edit/{docId}\r\n * Server must map this endpoint. If not available, client should call REST PUT.\r\n */\r\nexport function sendEditViaWS(docId, payload) {\r\n  if (!stompClient) return false;\r\n  try {\r\n    stompClient.send(`/app/edit/${docId}`, {}, JSON.stringify(payload));\r\n    return true;\r\n  } catch (e) {\r\n    console.error('Error sending WebSocket message', e);\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAASA,YAAY,EAAEC,IAAI,QAAQ,gBAAgB;AACnD,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,WAAW,GAAG,IAAI;;AAEtB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAE;EAC5D,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,IAAI;MACF,MAAMC,MAAM,GAAG,IAAIR,MAAM,CAAC,0BAA0B,CAAC;MACrDC,WAAW,GAAGF,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC;MAC5BP,WAAW,CAACQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;;MAE9BR,WAAW,CAACS,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;QAC5B;QACA,MAAMC,GAAG,GAAGV,WAAW,CAACW,SAAS,CAAC,mBAAmBT,KAAK,EAAE,EAAGU,GAAG,IAAK;UACrE,IAAIA,GAAG,CAACC,IAAI,EAAE;YACZ,IAAI;cACFV,SAAS,CAACW,IAAI,CAACC,KAAK,CAACH,GAAG,CAACC,IAAI,CAAC,CAAC;YACjC,CAAC,CAAC,OAAMG,CAAC,EAAE;cACTC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,CAAC,CAAC;YACrD;UACF;QACF,CAAC,CAAC;QAEF,IAAIZ,SAAS,EAAEA,SAAS,CAAC,CAAC;QAE1BE,OAAO,CAAC;UACNa,SAAS,EAAE,IAAI;UACfC,UAAU,EAAEA,CAAA,KAAM;YAChB,IAAI;cAAEV,GAAG,CAACW,WAAW,CAAC,CAAC;YAAE,CAAC,CAAC,OAAML,CAAC,EAAE,CAAC;YACrC,IAAI;cAAEhB,WAAW,CAACoB,UAAU,CAAC,CAAC;YAAE,CAAC,CAAC,OAAMJ,CAAC,EAAE,CAAC;UAC9C;QACF,CAAC,CAAC;MACJ,CAAC,EAAGM,GAAG,IAAK;QACVL,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEI,GAAG,CAAC;QAChDhB,OAAO,CAAC;UAAEa,SAAS,EAAE,KAAK;UAAEC,UAAU,EAAEA,CAAA,KAAM,CAAC;QAAE,CAAC,CAAC;MACrD,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOJ,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAAC;MACzCV,OAAO,CAAC;QAAEa,SAAS,EAAE,KAAK;QAAEC,UAAU,EAAEA,CAAA,KAAM,CAAC;MAAE,CAAC,CAAC;IACrD;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASG,aAAaA,CAACrB,KAAK,EAAEsB,OAAO,EAAE;EAC5C,IAAI,CAACxB,WAAW,EAAE,OAAO,KAAK;EAC9B,IAAI;IACFA,WAAW,CAACyB,IAAI,CAAC,aAAavB,KAAK,EAAE,EAAE,CAAC,CAAC,EAAEY,IAAI,CAACY,SAAS,CAACF,OAAO,CAAC,CAAC;IACnE,OAAO,IAAI;EACb,CAAC,CAAC,OAAOR,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,CAAC,CAAC;IACnD,OAAO,KAAK;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}