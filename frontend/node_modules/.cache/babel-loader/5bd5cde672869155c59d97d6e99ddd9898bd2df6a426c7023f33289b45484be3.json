{"ast":null,"code":"// src/websocket.js\nimport { Client } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nlet stompClient = null;\nexport function connectWebSocket(docId, onMessage, onConnect) {\n  return new Promise(resolve => {\n    try {\n      stompClient = new Client({\n        webSocketFactory: () => new SockJS(\"http://localhost:8080/ws\"),\n        debug: () => {},\n        reconnectDelay: 5000,\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000,\n        onConnect: () => {\n          const sub = stompClient.subscribe(`/topic/document/${docId}`, msg => {\n            if (msg.body) {\n              try {\n                onMessage(JSON.parse(msg.body));\n              } catch (e) {\n                console.error(e);\n              }\n            }\n          });\n          if (onConnect) onConnect();\n          resolve({\n            connected: true,\n            disconnect: () => {\n              try {\n                sub.unsubscribe();\n              } catch (e) {}\n              try {\n                stompClient.deactivate();\n              } catch (e) {}\n            }\n          });\n        },\n        onStompError: frame => {\n          console.error(\"STOMP error:\", frame);\n          resolve({\n            connected: false,\n            disconnect: () => {}\n          });\n        }\n      });\n      stompClient.activate();\n    } catch (e) {\n      console.error(\"WebSocket init error:\", e);\n      resolve({\n        connected: false,\n        disconnect: () => {}\n      });\n    }\n  });\n}\nexport function sendEditViaWS(docId, payload) {\n  if (!stompClient || !stompClient.connected) return false;\n  try {\n    stompClient.publish({\n      destination: `/app/edit/${docId}`,\n      body: JSON.stringify(payload)\n    });\n    return true;\n  } catch (e) {\n    console.error(\"Send WS error:\", e);\n    return false;\n  }\n}","map":{"version":3,"names":["Client","SockJS","stompClient","connectWebSocket","docId","onMessage","onConnect","Promise","resolve","webSocketFactory","debug","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","sub","subscribe","msg","body","JSON","parse","e","console","error","connected","disconnect","unsubscribe","deactivate","onStompError","frame","activate","sendEditViaWS","payload","publish","destination","stringify"],"sources":["C:/Users/Admin/Documents/collab-editing-system/frontend/src/websocket.js"],"sourcesContent":["// src/websocket.js\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\n\r\nlet stompClient = null;\r\n\r\nexport function connectWebSocket(docId, onMessage, onConnect) {\r\n  return new Promise((resolve) => {\r\n    try {\r\n      stompClient = new Client({\r\n        webSocketFactory: () => new SockJS(\"http://localhost:8080/ws\"),\r\n        debug: () => {},\r\n        reconnectDelay: 5000,\r\n        heartbeatIncoming: 4000,\r\n        heartbeatOutgoing: 4000,\r\n        onConnect: () => {\r\n          const sub = stompClient.subscribe(`/topic/document/${docId}`, (msg) => {\r\n            if (msg.body) {\r\n              try { onMessage(JSON.parse(msg.body)); } catch (e) { console.error(e); }\r\n            }\r\n          });\r\n\r\n          if (onConnect) onConnect();\r\n\r\n          resolve({\r\n            connected: true,\r\n            disconnect: () => {\r\n              try { sub.unsubscribe(); } catch(e) {}\r\n              try { stompClient.deactivate(); } catch(e) {}\r\n            }\r\n          });\r\n        },\r\n        onStompError: (frame) => {\r\n          console.error(\"STOMP error:\", frame);\r\n          resolve({ connected: false, disconnect: () => {} });\r\n        }\r\n      });\r\n\r\n      stompClient.activate();\r\n    } catch (e) {\r\n      console.error(\"WebSocket init error:\", e);\r\n      resolve({ connected: false, disconnect: () => {} });\r\n    }\r\n  });\r\n}\r\n\r\nexport function sendEditViaWS(docId, payload) {\r\n  if (!stompClient || !stompClient.connected) return false;\r\n  try {\r\n    stompClient.publish({ destination: `/app/edit/${docId}`, body: JSON.stringify(payload) });\r\n    return true;\r\n  } catch (e) {\r\n    console.error(\"Send WS error:\", e);\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAE;EAC5D,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,IAAI;MACFN,WAAW,GAAG,IAAIF,MAAM,CAAC;QACvBS,gBAAgB,EAAEA,CAAA,KAAM,IAAIR,MAAM,CAAC,0BAA0B,CAAC;QAC9DS,KAAK,EAAEA,CAAA,KAAM,CAAC,CAAC;QACfC,cAAc,EAAE,IAAI;QACpBC,iBAAiB,EAAE,IAAI;QACvBC,iBAAiB,EAAE,IAAI;QACvBP,SAAS,EAAEA,CAAA,KAAM;UACf,MAAMQ,GAAG,GAAGZ,WAAW,CAACa,SAAS,CAAC,mBAAmBX,KAAK,EAAE,EAAGY,GAAG,IAAK;YACrE,IAAIA,GAAG,CAACC,IAAI,EAAE;cACZ,IAAI;gBAAEZ,SAAS,CAACa,IAAI,CAACC,KAAK,CAACH,GAAG,CAACC,IAAI,CAAC,CAAC;cAAE,CAAC,CAAC,OAAOG,CAAC,EAAE;gBAAEC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;cAAE;YACzE;UACF,CAAC,CAAC;UAEF,IAAId,SAAS,EAAEA,SAAS,CAAC,CAAC;UAE1BE,OAAO,CAAC;YACNe,SAAS,EAAE,IAAI;YACfC,UAAU,EAAEA,CAAA,KAAM;cAChB,IAAI;gBAAEV,GAAG,CAACW,WAAW,CAAC,CAAC;cAAE,CAAC,CAAC,OAAML,CAAC,EAAE,CAAC;cACrC,IAAI;gBAAElB,WAAW,CAACwB,UAAU,CAAC,CAAC;cAAE,CAAC,CAAC,OAAMN,CAAC,EAAE,CAAC;YAC9C;UACF,CAAC,CAAC;QACJ,CAAC;QACDO,YAAY,EAAGC,KAAK,IAAK;UACvBP,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEM,KAAK,CAAC;UACpCpB,OAAO,CAAC;YAAEe,SAAS,EAAE,KAAK;YAAEC,UAAU,EAAEA,CAAA,KAAM,CAAC;UAAE,CAAC,CAAC;QACrD;MACF,CAAC,CAAC;MAEFtB,WAAW,CAAC2B,QAAQ,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOT,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAAC;MACzCZ,OAAO,CAAC;QAAEe,SAAS,EAAE,KAAK;QAAEC,UAAU,EAAEA,CAAA,KAAM,CAAC;MAAE,CAAC,CAAC;IACrD;EACF,CAAC,CAAC;AACJ;AAEA,OAAO,SAASM,aAAaA,CAAC1B,KAAK,EAAE2B,OAAO,EAAE;EAC5C,IAAI,CAAC7B,WAAW,IAAI,CAACA,WAAW,CAACqB,SAAS,EAAE,OAAO,KAAK;EACxD,IAAI;IACFrB,WAAW,CAAC8B,OAAO,CAAC;MAAEC,WAAW,EAAE,aAAa7B,KAAK,EAAE;MAAEa,IAAI,EAAEC,IAAI,CAACgB,SAAS,CAACH,OAAO;IAAE,CAAC,CAAC;IACzF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOX,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEF,CAAC,CAAC;IAClC,OAAO,KAAK;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}